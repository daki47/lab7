#include<iostream>
using namespace std;


class Vehicle
{
protected:
    float mass;
    int width;
    int height;
public:
    Vehicle(float mass=0, int width=0, int height=0){
        this->mass=mass;
        this->width=width;
        this->height=height;
    }
    Vehicle(const Vehicle &v){
        this->mass=v.mass;
        this->width=v.width;
        this->height=v.height;
    }

    virtual float getMass(){
        return mass;
    }
    virtual int getwidth(){
        return width;
    }
     virtual float getMax_weight(){
    }
     virtual int dailyPrice();
};

class Automobile : public Vehicle
{
    int numberOfDoors;
public:
    Automobile(float mass=0, int width=0, int height=0, int numberOfDoors=0) : Vehicle(mass,width,height){
        this->numberOfDoors=numberOfDoors;
    }

    virtual float getMass(){
        return mass;
    }
     virtual int getwidth(){
        return width;
    }
     virtual int dailyPrice()
    {
        if(numberOfDoors<5)
            return 100;
        else
            return 130;
    }
};

class Bus : public Vehicle
{
    int numberOfPassengers;
public:
    Bus(float mass=0, int width=0, int height=0, int numberOfPassengers=0) : Vehicle(mass,width,height){
        this->numberOfPassengers=numberOfPassengers;
    }

     virtual float getMass(){
       return mass;
    }
      virtual int getwidth(){
        return width;
    }
    virtual int dailyPrice()
    {
        return numberOfPassengers*5;
    }
};

class Truck : public Vehicle
{
    float max_weight;
public:
    Truck(float mass=0, int width=0, int height=0, float max_weight=0) : Vehicle(mass,width,height){
        this->max_weight=max_weight;
    }
 virtual float getMass()
    {
        return mass;
    }
      virtual int getwidth(){
        return width;
    }
     virtual float getMax_weight(){
        return max_weight;
    }
     virtual int dailyPrice()
    {
        return (mass+max_weight)*0.02;
    }
};

class Parking
{
    Vehicle *vehicles;
    int nElements;
    //Vehicle ** vehicles= new Vehicle * [nElements];

    void copy(const Parking & p)
     {
        this->nElements=p.nElements;
        vehicles=new Vehicle[p.nElements];
        for(int i=0;i<nElements;i++)
        {
            vehicles[i]=p.vehicles[i];
        }
    }
public:
    Parking()
    {
        vehicles=new Vehicle[0];
        nElements=0;
    }
    Parking(const Parking & p)
    {
        copy(p);
    }
    ~Parking();
    Parking &operator+=(const Vehicle & v)
    {
        Parking temp(*this);
        for(int i=0;i<nElements;i++)
        {
            temp.vehicles[i]=this->vehicles[i];
        }
        delete [] this->vehicles;
        for(int i=0;i<nElements;i++)
        {
           this->vehicles[i]=temp.vehicles[i];
        }
        nElements++;
        vehicles[nElements]=v;
        return *this;
    }
    float totallmass()
    {
        float massofv=0;
        for(int i=0;i<nElements;i++)
        {
            massofv+=vehicles[i].getMass();
        }
        return massofv;
    }

    int vehiclesWiderThan(int width)
    {
        int counter=0;
        for(int i=0;i<nElements;i++)
        {
            if(vehicles[i].getwidth()>=width)
                counter++;
        }
        return counter;
    }
    void print()
    {

    }

    int greaterMaxWeightThan(Vehicle &v)
    {
        int counter=0;
        for(int i=0;i<nElements;i++)
        {
            if(vehicles[i].getMax_weight()>=v.getMax_weight())
                counter++;
        }
        return counter;
    }

};


int main() {
    Parking p;
    int n;
    cin >> n;
    int width, height, number;
    float mass, max_weight;
    for (int i = 0; i < n; i++) {
        int type;
        cin >> type;
        if (type == 1) {
            cin >> mass >> width >> height >> number;
            Automobile *a = new Automobile(mass, width, height, number);
            p += a;
        }
        if (type == 2) {
            cin >> mass >> width >> height >> number;
            p += new Bus(mass, width, height, number);
        }
        if (type == 3) {
            cin >> mass >> width >> height >> max_weight;
            p += new Truck(mass, width, height, max_weight);
        }
    }

    p.print();
    cout << "\nDaily profit: " << p.dailyProfit() << endl;
    cout << "Total mass: " << p.totallMass() << endl;
    cout << "Number wider then 5 is: " << p.vehiclesWiderThan(5) << endl;
    Automobile a(1200, 4, 3, 5);
    cout << "Number of trucks with max weight larger then the automobile is: " << p.greaterMaxWeightThan(a) << endl;
    return 0;
}
